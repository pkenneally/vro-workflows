<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="executeTransientRESTOperation" result-type="Properties" api-version="6.0.0" id="f5bbb734-6c7f-419a-8bfc-2fef20b42926" version="1.0.0" allowed-operations="vfe" category-name="org.custom.library.rest">
  <description><![CDATA[Executes a transient RESTOperation for a transient RESTHost.
Performs the operation without having the operation nor the host persist in the RESTHost Inventory.
Returns the response string and status code as named key-value pairs "responseString" and "statusCode", respectively.

For vRO 7.0+]]></description>
  <param n="baseUrl" t="string"><![CDATA[Base URL for connecting to the RESTful application]]></param>
  <param n="username" t="string"><![CDATA[Optional username for Basic authentication to the REST host]]></param>
  <param n="password" t="SecureString"><![CDATA[Optional password for Basic authentication to the REST host]]></param>
  <param n="opMethod" t="string"><![CDATA[Method of the REST operation]]></param>
  <param n="opUrl" t="string"><![CDATA[URL template of the REST operation including variablized in-line arguments; e.g., /items/{arg1}]]></param>
  <param n="urlParamValues" t="Array/string"><![CDATA[In-line parameter values, if any]]></param>
  <param n="headers" t="Properties"><![CDATA[Optional headers of the request]]></param>
  <param n="contentType" t="string"><![CDATA[ Optional content type of the request body (null for GET and DELETE operations)]]></param>
  <param n="content" t="string"><![CDATA[Content of the request body (null for GET and DELETE operations)]]></param>
  <script encoded="false"><![CDATA[/**
* Executes a transient RESTOperation for a transient RESTHost.
Performs the operation without having the operation nor the host persist in the RESTHost Inventory.
Adding and reloading dynamicaly the certificate in keystore
Returns the response string and status code as named key-value pairs "responseString" and "statusCode", respectively.
       
For vRO 7.0+
* @param baseUrl {string} Base URL for connecting to the RESTful application
* @param username {string} Optional username for Basic authentication to the REST host
* @param password {SecureString} Optional password for Basic authentication to the REST host
* @param opMethod {string} Method of the REST operation
* @param opUrl {string} URL template of the REST operation including variablized in-line arguments; e.g., /items/{arg1}
* @param urlParamValues {Array/string} In-line parameter values, if any
* @param headers {Properties} Optional headers of the request
* @param contentType {string}  Optional content type of the request body (null for GET and DELETE operations)
* @param content {string} Content of the request body (null for GET and DELETE operations)
* @returns properties{
    statusCode:number,
    responseString:string
    }
* @returns exception with properties{
    statusCode: statusCode,
    message: "HTTPError: status code: " + statusCode + ". Details: " + response.contentAsString,
    responseString: response.contentAsString
    }
*/

// get action name for debug
var actionName = arguments.callee.name.substr(6);
try{ System.debug("[action-start] Starting action '"+actionName+"'"); var timeStart = new Date().getTime(); return main(); }
finally{ System.debug("[action-end] Finished action '"+actionName+"' in "+(new Date().getTime()-timeStart)+"ms"); }


// main of the action
function main() {

	if(!baseUrl){
		throw "Incorrect information provided, baseUrl it must be filled in";
	}
    
    if(!opMethod){
		throw "Incorrect information provided, opMethod it must be filled in";
	}

    if(!opUrl){
		throw "Incorrect information provided, baseUrl it must be filled in";
	}

    //import cert for URL
    var ld = Config.getKeystores().getImportCAFromUrlAction();
    var model = ld.getModel();
    model.value = baseUrl;
    error = ld.execute();
    try{

        // Create transient host and Op
        var host = createHost(baseUrl, username, password);
        var op = createOp(host, opMethod, opUrl);

        // Execute request
        var request = setRequest(op, setUrlParamValues(urlParamValues), headers, contentType, content);
        var response = request.execute();

        //Process response
        var responseString = parseResponse(response);
        var statusCode = response.statusCode;

        //return response as 
        return {
            statusCode: statusCode,
            responseString: responseString
        };
    }
    catch (ex){
        throw ex;
    }
}
// Create a transient RESTHost
// If given user/password, uses Basic auth in Shared Session mode
function createHost(url, user, pw) {
	System.debug("Creating transient REST host with base URL: " + url);
	
	var host = new RESTHost(url);
	host.name = generateNameFromUrl(url);
	host.url = url;
	host.hostVerification = false;
	host.proxyHost = null;
	host.proxyPort = 0;
	host.authentication = createSharedBasicAuth(user, pw);
	
	host = RESTHostManager.createTransientHostFrom(host);
	
	RESTHostManager.reloadConfiguration();
	
	return host;
}

// Generate a friendly name for a RESTHost or RESTOperation from a given URL,
// removing "HTTP" and "HTTPS", and replacing non-words with '_'
function generateNameFromUrl(url) {
	var name = url;
	name = name.replace(/https:\/\//i, '');
	name = name.replace(/http:\/\//i, '');
	name = name.replace(/\W/g, '_');
	return name;
}

// Instantiate REST Basic authentication in Shared Session mode
function createSharedBasicAuth(user, pw) {
	if (!isSet(user) || !isSet(pw)) {
		return null;
	}
	
	var authParams = ["Shared Session", user, pw];
	var authObject = RESTAuthenticationManager.createAuthentication("Basic", authParams);
	
	return authObject;
}

// Is a given string non-null and not empty?
function isSet(s) {
	return s != null && s != "";
}

// Create a transient RESTOperation
// For POST, PUT and PATCH, the default content type is application/json
function createOp(host, method, url) {
	var name = generateNameFromUrl(url);
	
	var op = new RESTOperation(name);
	op.method = method;
	op.urlTemplate = url;
	op.host = host;
    //Need a regex because more than two condition doesn't works on oneliner
    const regexMethod = /POST|PUT|PATCH/g;
    if (method.match(regexMethod)){ 
        	op.defaultContentType = "application/json";
    }
	
	//System.debug("Creating operation '" + name + " with URL '" + url + "'");
	
	op = RESTHostManager.createTransientOperationFrom(op);
	
	return op;
}

// If no in-line parameter values are given, return empty array by default
function setUrlParamValues(urlParamValues) {
	return (!urlParamValues) ? [] : urlParamValues;
}

// Prepare the RESTRequest object for executing the RESTOperation
function setRequest(op, urlParamValues, headers, contentType, content) {
	var request = op.createRequest(urlParamValues, content);
 
    //overriding default content
    if(isSet(content)){
	    request.contentType = contentType;
    }

	
    for (var i = 0; headers && i < headers.keys.length; i++) {
        request.setHeader(headers.keys[i], headers.get(headers.keys[i]));
    }

	System.debug("Request URL: " + request.fullUrl);
   	
	return request;
}

// Parse the RESTResponse object returned from executing a RESTOperation
function parseResponse(response) {
    const HTTP_ClientError = 400;
	var statusCode = response.statusCode;
	
    /*
	var headers = response.getAllHeaders();
    var headerKeys = headers.keys;
	for (var i = 0; i < headerKeys.length; i++) {
		System.debug(headerKeys[i] + ": " + headers.get(headerKeys[i]));
	}
	*/
	var contentAsString = response.contentAsString;
	//System.debug("Response content as string: " + contentAsString);
	
	if (statusCode >= HTTP_ClientError) {
        //System.debug("Status code: " + statusCode);
        var exception = {
            statusCode: statusCode,
            message: "HTTPError: status code: " + statusCode + ". Details: " + response.contentAsString,
            responseString: response.contentAsString
        }

        throw exception;
	}
	return contentAsString;
	
}]]></script>
</dunes-script-module>